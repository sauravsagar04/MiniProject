# -*- coding: utf-8 -*-
"""Handwritten_Digit _Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B26rOUODen5iWY4HyK1djZM3Ah5k7aDq
"""

"""Loading MNIST dataset for training the model"""
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D
from tensorflow.keras.layers import MaxPooling2D
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Flatten
from tensorflow.keras.optimizers import SGD

import matplotlib.pyplot as plt

(trainX, trainY), (testX, testY) = mnist.load_data()
#  observing the dimensions of loaded data
print('Shape of Training dataset: X={}, y={}'.format(trainX.shape, trainY.shape))
print('Shape of Testing dataset: X={}, y={}'.format(testX.shape, testY.shape))

# Visualising some of the examples
for i in range(3*3):
  # defining subplot
  plt.subplot(331 + i)
  # plotting the pixel data
  plt.imshow(trainX[10*i], cmap=plt.get_cmap('Blues'))

# showing the figure
plt.show()

# reshape dataset to have a single channel
trainX = trainX.reshape((trainX.shape[0], 28, 28, 1))
testX = testX.reshape((testX.shape[0], 28, 28, 1))
# one hot encode target values
trainY = to_categorical(trainY)
testY = to_categorical(testY)

# convert from integers to floats
train_norm = trainX.astype('float32')
test_norm = testX.astype('float32')
# normalize to range 0-1
train_norm_X = train_norm / 255.0
test_norm_X = test_norm / 255.0


trainX = train_norm_X
testX = test_norm_X

model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', kernel_initializer='he_uniform', input_shape=(28, 28, 1)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform'))
model.add(Conv2D(64, (3, 3), activation='relu', kernel_initializer='he_uniform'))
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(100, activation='relu', kernel_initializer='he_uniform'))
model.add(Dense(10, activation='softmax'))
# compile model
opt = SGD(learning_rate=0.01, momentum=0.9)
model.compile(optimizer=opt, loss='categorical_crossentropy', metrics=['accuracy'])

model.fit(trainX, trainY, epochs=10, batch_size=32, verbose=0)
# save model
model.save('Final_model')

_, acc = model.evaluate(testX, testY, verbose=0)
print('> %.3f' % (acc * 100.0))

from numpy import argmax
from keras.preprocessing.image import load_img
from keras.preprocessing.image import img_to_array
from keras.models import load_model

# load and prepare the image
def load_image(filename):
  # load the image
  img = load_img(filename, grayscale=True, target_size=(28, 28))
  # convert to array
  img = img_to_array(img)
  # reshape into a single sample with 1 channel
  img = img.reshape(1, 28, 28, 1)
  # prepare pixel data
  img = img.astype('float32')
  img = img / 255.0
  return img

# Taking a new image data.

import matplotlib.pyplot as plt

def load_image(filename):
  # load the image
  img = load_img(filename, grayscale=True, target_size=(28, 28))
  # convert to array
  img = img_to_array(img)
  # reshape into a single sample with 1 channel
  img = img.reshape(1, 28, 28, 1)
  # prepare pixel data
  img = img.astype('float32')
  img = img / 255.0
  return img

img = load_img("/content/WhatsApp Image 2021-12-07 at 11.38.24 PM.jpeg")

plt.imshow(img, cmap=plt.get_cmap('Blues'))

# Predicting a new datapoint
def run_example(path):
  from PIL import Image
	# load the image
  img = load_image(path)
  
	# load model
  model = load_model('Final_model')
	# predict the class
  predict_value = model.predict(img)
  digit = argmax(predict_value)
  print("Predicted label for the given image is: ",digit)

run_example("/content/WhatsApp Image 2021-12-07 at 11.38.24 PM.jpeg")

